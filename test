#!/bin/bash

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -u

# The Buildifier target doesn’t work well on old Bazel versions.
if [[ "$(bazel --version)" == 'bazel 4'.* ]]; then
  bazel run -- @com_github_bazelbuild_buildtools//buildifier \
    --mode=check --lint=warn -r -- "${PWD}" || exit
fi

# Ensure that emacs-module.h exists, for the “go vet” and “golint” commands
# below.
bazel build -- '@gnu_emacs_27.2//:emacs-module.h' || exit
bin_dir="$(bazel info bazel-bin)" || exit

export CGO_CFLAGS="-isystem ${bin_dir}/external/gnu_emacs_27.2
  -pedantic-errors -Werror -Wall -Wextra
  -Wno-sign-compare
  -Wno-unused-parameter
  -Wno-language-extension-token"

go vet || exit
golint -set_exit_status -min_confidence=0.3 || exit

versions=(27.{1,2})
readonly versions

case "$(uname -sm)" in
  'Darwin arm64')
    unsupported=(27.1) ;;
  Darwin*|Linux*)
    unsupported=() ;;
  *)
    echo 'unsupported platform' >&2
    exit 1 ;;
esac
readonly unsupported

is_supported() {
  for version in "${unsupported[@]}"; do
    [[ "$1" == "${version}" ]] && return 1
  done
}

run() {
  (set -x; bazel test --test_output=errors "$@" -- //...)
  echo
}

# Test default toolchain.
run || exit

# Test versioned toolchains.
for version in "${versions[@]}"; do
  if is_supported "${version}"; then
    toolchain="//elisp:emacs_${version}_toolchain"
    run --extra_toolchains="${toolchain}" || exit
  fi
done
